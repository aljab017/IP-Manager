<?php

namespace Drupal\ip_register;

use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\File\FileSystemInterface;
use Drupal\ip_register\IpChangeInterface;
use Symplify\GitWrapper\GitWrapper;

/**
 * Export service for IP Register.
 */
class Export {

  /**
   * The entity type manager.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected $entityTypeManager;

  /**
   * The file system service.
   *
   * @var \Drupal\Core\File\FileSystemInterface
   */
  protected $fileSystem;

  /**
   * The config factory.
   *
   * @var \Drupal\Core\Config\ConfigFactoryInterface
   */
  protected $configFactory;

  /**
   * Constructs an Export object.
   *
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
   *   The entity type manager.
   * @param \Drupal\Core\File\FileSystemInterface $file_system
   *   The file system service.
   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
   *   The config factory.
   */
  public function __construct(EntityTypeManagerInterface $entity_type_manager, FileSystemInterface $file_system, ConfigFactoryInterface $config_factory) {
    $this->entityTypeManager = $entity_type_manager;
    $this->fileSystem = $file_system;
    $this->configFactory = $config_factory;
  }

  /**
   * Exports IP Ranges to an EzProxy configuration text file saved in Drupal private filesystem.
   *
   * @param \Drupal\ip_register\Entity\IpChange $ip_change
   *   The IP Change entity that requested the export.
   */
  public function toEzProxy(\Drupal\ip_register\Entity\IpChange $ip_change) {
    $config = $this->configFactory->get('ip_register.settings');
    $repo_uri = $config->get('repo_uri');
    if ($this->fileSystem->prepareDirectory($repo_uri, FileSystemInterface::CREATE_DIRECTORY)) {
      $file_uri = $repo_uri . $config->get('output_file');
      // Create a git client.
      $gitWrapper = new GitWrapper();
      // Use deploy key path from config.
      $gitWrapper->setPrivateKey($config->get('git_deploy_key_path'));
      // Set the working copy object to the local server path/to/repo.
      $git = $gitWrapper->workingCopy($this->fileSystem->realpath($repo_uri));
      // Pull other changes to sync with remote before committing.
      $git->pull();
      // Overwrite our file with a new one generated from the current Drupal database.
      $this->fileSystem->saveData($this->buildFile(), $file_uri, FileSystemInterface::EXISTS_REPLACE);
      // Add our file, commit it, and push the change.
      $git->add($this->fileSystem->realpath($file_uri));
      if($git->hasChanges()) {
        $git->commit('auto-commit from Drupal IP Change ' . $ip_change->id());
        $result = $git->push();
        \Drupal::service('messenger')->addStatus(t('IP Change sent to proxy server for processing.'));
      }
    }
  }

  /**
   * Returns a string formatted as a valid EzProxy configuration text file containing all IP Ranges
   * registered with the 'elm' IP Registrar.
   *
   * @return string $file_contents
   */
  public function buildFile() {
    // Get all IP Range entities that have 'elm' in their registrars field.
    $ip_ranges = $this->entityTypeManager->getStorage('ip_range')->loadByProperties(['registrars' => ['elm']]);
    // Prepare the contents of the file.
    $file_contents = '# ************************ EZproxy IP authentication rules *****************************
# Generated by Drupal on ' . date('m/d/Y g:ia') . '.
# Manual changes to this file will be overwritten.
#

##########################################
# State of Minnesota state.mn.us IP ranges
##########################################

AutoLoginIP 156.98.0.0/16
AutoLoginIP 64.8.128.0/18
AutoLoginIP 151.111.0.0/16
AutoLoginIP 207.171.64.0/18
AutoLoginIP 156.99.0.0/16
AutoLoginIP 204.77.32.0/19
AutoLoginIP 192.112.137.0/24
AutoLoginIP 192.112.136.0/24
AutoLoginIP 192.112.135.0/24

##########################################

';
    foreach ($ip_ranges as $ip_range) {
      // Get the start and end IP in standard notation.
      $ip_start = inet_ntop($ip_range->get('ip_addresses')->get(0)->ip_start);
      $ip_end = inet_ntop($ip_range->get('ip_addresses')->get(0)->ip_end);
      // Append the IP Range to a newline in the file.
      $file_contents .= t(
        'A @ip_range # @organization
',  // creates newline after ^
        [
          '@ip_range' =>  $ip_start . '-' . $ip_end,
          '@organization' => $ip_range->get('organization')->entity ? $ip_range->get('organization')->entity->label() : 'NO ORGANIZATION',
        ]);
    }
    return (string) $file_contents;
  }
}
